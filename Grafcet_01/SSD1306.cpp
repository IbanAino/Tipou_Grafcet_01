

//-----------------------
//------ LIBRARIES ------
//-----------------------

#include "SSD1306.h"

// include I2C library
#include <Wire.h>



#define SSD1306_LCDWIDTH      128
#define SSD1306_LCDHEIGHT      64
#define SSD1306_SETCONTRAST   0x81
#define SSD1306_DISPLAYALLON_RESUME 0xA4
#define SSD1306_DISPLAYALLON 0xA5
#define SSD1306_NORMALDISPLAY 0xA6
#define SSD1306_INVERTDISPLAY 0xA7
#define SSD1306_DISPLAYOFF 0xAE
#define SSD1306_DISPLAYON 0xAF
#define SSD1306_SETDISPLAYOFFSET 0xD3
#define SSD1306_SETCOMPINS 0xDA
#define SSD1306_SETVCOMDETECT 0xDB
#define SSD1306_SETDISPLAYCLOCKDIV 0xD5
#define SSD1306_SETPRECHARGE 0xD9
#define SSD1306_SETMULTIPLEX 0xA8
#define SSD1306_SETLOWCOLUMN 0x00
#define SSD1306_SETHIGHCOLUMN 0x10
#define SSD1306_SETSTARTLINE 0x40
#define SSD1306_MEMORYMODE 0x20
#define SSD1306_COLUMNADDR 0x21
#define SSD1306_PAGEADDR   0x22
#define SSD1306_COMSCANINC 0xC0
#define SSD1306_COMSCANDEC 0xC8
#define SSD1306_SEGREMAP 0xA0
#define SSD1306_CHARGEPUMP 0x8D
#define SSD1306_EXTERNALVCC 0x1
#define SSD1306_SWITCHCAPVCC 0x2


//-----------------------
//------ VARIABLES ------
//-----------------------

uint8_t _i2c_address = 0x3C;

// Buffer with a picture saved on
static uint8_t buffer[1024] = {
  // 'Marianne, 128x64px
  0x20, 0x00, 0x00, 0x28, 0x40, 0x3f, 0xff, 0xff, 0xe0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 
  0x8c, 0x00, 0x00, 0x10, 0x80, 0xbf, 0xff, 0xff, 0xc2, 0x40, 0x00, 0x00, 0x00, 0x00, 0x09, 0x8a, 
  0x20, 0x00, 0x01, 0x61, 0x00, 0x5f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x24, 
  0x2c, 0x00, 0x08, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x20, 0x00, 0x00, 0x09, 0x00, 0x02, 0xc2, 
  0x04, 0x00, 0x00, 0xc2, 0x01, 0x7f, 0xff, 0xff, 0xf2, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x51, 
  0xa2, 0x04, 0x81, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 
  0x18, 0x40, 0x00, 0x82, 0x03, 0x7f, 0xff, 0xff, 0xd8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0xa2, 
  0x84, 0x00, 0x04, 0x40, 0x00, 0x7f, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x12, 
  0xa4, 0x00, 0x03, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x09, 0x48, 
  0x10, 0x00, 0x00, 0x00, 0x01, 0x0f, 0xff, 0xff, 0xf9, 0x10, 0x00, 0x04, 0x00, 0x00, 0x04, 0x25, 
  0x4a, 0x00, 0x42, 0x80, 0x0f, 0x83, 0xff, 0xff, 0xf8, 0x80, 0x00, 0x20, 0x00, 0x00, 0x02, 0x90, 
  0x20, 0x80, 0x12, 0x10, 0x0f, 0xf5, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 
  0x14, 0x24, 0x01, 0x00, 0x0b, 0xfb, 0xff, 0xff, 0xf4, 0x20, 0x00, 0x04, 0x00, 0x00, 0x04, 0xa2, 
  0xa0, 0x00, 0x08, 0x00, 0x10, 0x19, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0a, 0x10, 
  0x16, 0x00, 0x14, 0x00, 0x08, 0x16, 0xff, 0xe2, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x4d, 
  0x80, 0x01, 0x04, 0x00, 0x00, 0x31, 0xff, 0xda, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x40, 
  0x54, 0xa4, 0x24, 0x00, 0x00, 0x3e, 0x7f, 0x95, 0x7f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0a, 0x2d, 
  0x42, 0x21, 0x42, 0x00, 0x14, 0x7f, 0x5d, 0x22, 0x2a, 0x00, 0x00, 0x00, 0x40, 0x00, 0x05, 0x40, 
  0x95, 0x9e, 0xb0, 0x00, 0x0b, 0xfe, 0xfe, 0x48, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x2a, 
  0x51, 0x41, 0x48, 0x00, 0x0b, 0xfe, 0xfe, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 
  0x08, 0xa9, 0x24, 0x00, 0x27, 0xfe, 0x7e, 0x36, 0x3d, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xd5, 
  0xa5, 0x2c, 0x90, 0x00, 0x57, 0xfe, 0xfe, 0x9d, 0xfc, 0x40, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 
  0x48, 0xd5, 0x42, 0x00, 0x2b, 0xff, 0xfc, 0x37, 0xfa, 0x00, 0x00, 0x00, 0x90, 0x00, 0x01, 0x4a, 
  0x0a, 0x04, 0xa0, 0x00, 0xdf, 0xfd, 0xfa, 0x17, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x24, 
  0x41, 0xa4, 0xa0, 0x00, 0x6f, 0xfb, 0xfd, 0x5f, 0xf7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x13, 0x12, 
  0xaa, 0x52, 0x49, 0x00, 0x3f, 0xf7, 0xfa, 0x8f, 0xff, 0x40, 0x00, 0x00, 0x20, 0x00, 0x04, 0x89, 
  0x01, 0x2c, 0x80, 0x00, 0x9f, 0xff, 0xfd, 0x7f, 0xff, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 
  0x59, 0x42, 0x40, 0x00, 0x6a, 0xdb, 0xff, 0x8f, 0xff, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x24, 
  0x09, 0x53, 0x40, 0x00, 0x7f, 0xf7, 0xfa, 0x9f, 0xff, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 
  0xa4, 0xa8, 0x04, 0x00, 0x7d, 0x5f, 0xfc, 0xcf, 0xff, 0x60, 0x00, 0x00, 0x00, 0x00, 0x04, 0x44, 
  0x12, 0x82, 0xa0, 0x80, 0x7f, 0xff, 0xfe, 0x73, 0xfe, 0xdc, 0x00, 0x00, 0x20, 0x00, 0x08, 0x92, 
  0x80, 0x51, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x39, 0xb5, 0xe1, 0x80, 0x00, 0x00, 0x01, 0x06, 0x42, 
  0x5b, 0x25, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0xbe, 0xff, 0x5f, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x32, 
  0x21, 0x10, 0x00, 0x00, 0x3f, 0xff, 0xfd, 0x1f, 0xff, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x08, 0x89, 
  0x94, 0x52, 0x20, 0x00, 0x3f, 0xff, 0xfa, 0xdf, 0xee, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x0a, 0x44, 
  0x43, 0x00, 0x00, 0x00, 0x1f, 0xfd, 0xf5, 0x5f, 0xf7, 0x5f, 0xf8, 0x00, 0x00, 0x00, 0x09, 0x22, 
  0x31, 0x51, 0x00, 0x00, 0x3f, 0xfd, 0xd5, 0x0f, 0xfb, 0xbf, 0xfc, 0x00, 0x00, 0x00, 0x04, 0x91, 
  0x04, 0x20, 0x10, 0x00, 0x1f, 0xfe, 0xa0, 0x8f, 0xfe, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x14, 
  0xa9, 0x81, 0x00, 0x00, 0x1f, 0xff, 0xc8, 0x57, 0xff, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x0c, 0x42, 
  0x04, 0x00, 0x80, 0x00, 0x0f, 0xff, 0xf2, 0x07, 0xfb, 0xff, 0xff, 0x80, 0x00, 0x00, 0x02, 0x92, 
  0xa4, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xf9, 0x5f, 0xed, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x08, 0xa1, 
  0x50, 0x00, 0x00, 0x00, 0x0d, 0xff, 0xfc, 0xbf, 0xfd, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x04, 0x14, 
  0x0a, 0x02, 0x80, 0x00, 0x07, 0xff, 0xff, 0xff, 0xab, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x02, 0xc2, 
  0x48, 0x00, 0x00, 0x00, 0x06, 0xaa, 0xff, 0xdb, 0xe9, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x08, 0x28, 
  0x04, 0x02, 0x00, 0x00, 0x02, 0xff, 0x40, 0x6b, 0xeb, 0xcf, 0xff, 0xf4, 0x00, 0x00, 0x0a, 0x25, 
  0xa2, 0x10, 0x00, 0x00, 0x01, 0xff, 0xd5, 0x07, 0xab, 0xe7, 0xff, 0xff, 0x00, 0x00, 0x01, 0x0a, 
  0x28, 0x02, 0x20, 0x00, 0x00, 0xf7, 0xff, 0x47, 0xd3, 0x87, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xe0, 
  0x94, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x69, 0xe3, 0xff, 0xff, 0x80, 0x00, 0x04, 0x2a, 
  0x02, 0x00, 0x40, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x91, 0xf3, 0xff, 0xff, 0xc0, 0x00, 0x04, 0x82, 
  0xb0, 0x00, 0x84, 0x00, 0x01, 0xfe, 0xda, 0xeb, 0x23, 0xe1, 0xff, 0xff, 0xe0, 0x00, 0x02, 0x29, 
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xad, 0x1c, 0x88, 0xf1, 0xff, 0xff, 0xf0, 0x00, 0x08, 0x94, 
  0x44, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf7, 0xd6, 0x40, 0xfc, 0xff, 0xff, 0xf8, 0x00, 0x0a, 0x84, 
  0x20, 0x00, 0x00, 0x80, 0x00, 0x7f, 0xff, 0xfa, 0x40, 0x7c, 0x7f, 0xff, 0xfc, 0x00, 0x08, 0xa2, 
  0x8c, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x3f, 0x3f, 0xff, 0xfe, 0x00, 0x02, 0x14, 
  0x10, 0x00, 0x01, 0x00, 0x00, 0x1f, 0xff, 0xf2, 0x80, 0x1e, 0x1f, 0xff, 0xff, 0x00, 0x09, 0x41, 
  0x4a, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xff, 0xe8, 0x00, 0x1f, 0x0f, 0xff, 0xff, 0x80, 0x04, 0x94, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xa5, 0x00, 0x0c, 0x0f, 0xff, 0xff, 0xc0, 0x02, 0x52, 
  0x4a, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x50, 0x80, 0x0e, 0x23, 0xff, 0xff, 0xe0, 0x08, 0x84, 
  0x14, 0x00, 0x00, 0x00, 0x00, 0x35, 0x7e, 0x80, 0x00, 0x07, 0xc1, 0xff, 0xff, 0xf0, 0x02, 0x50, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xaa, 0x2c, 0x00, 0x03, 0xe0, 0x7f, 0xff, 0xfc, 0x09, 0x16, 
  0xac, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x42, 0x00, 0x01, 0xc0, 0x1f, 0xff, 0xf8, 0x04, 0x82, 
  0x22, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xeb, 0x29, 0x00, 0x01, 0xc0, 0x0f, 0xff, 0xfe, 0x08, 0x50, 
  0x88, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf4, 0xa0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x02, 0x8a, 
  0x24, 0x00, 0x00, 0x00, 0x00, 0x47, 0xfa, 0x2c, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc8, 0x22
};


//-----------------------
//------ FUNCTIONS ------
//-----------------------

void ssd1306_command(uint8_t c) {
  // I2C
  uint8_t control = 0x00;   // Co = 0, D/C = 0
  Wire.beginTransmission(_i2c_address);
  //Wire.write(_i2c_address);
  Wire.write(control); // 0: the transmission of the following information will contain data bytes only. 
  Wire.write(c);
  Wire.endTransmission();
}

void screenDisplay(){
  for (uint16_t i = 0; i < 1024; i++) {
    // send a bunch of data in one xmission
    Wire.beginTransmission(_i2c_address);
    Wire.write(0x40); // data not command
    for (uint8_t x=0; x<16; x++) {
      Wire.write(buffer[i]);
      i++;
    }
    i--;
    Wire.endTransmission();
  }
}

void drawPixel(int16_t x, int16_t y) {
    buffer[x+ (y/8)*128] |=  (1 << (y&7));
}


void drawBitmap(int16_t x, int16_t y,
  const uint8_t bitmap[], int16_t w, int16_t h) {

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++) {
            if(i & 7) byte <<= 1;
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
            if(byte & 0x80) drawPixel(x+i, y);
        }
    }
}



// clear everything
void clearDisplay() {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}

// init according to SSD1306 data sheet and many places on the web
void  InitializeDisplay()
{
    // reset
    /*
    output_high(DISPLAY_RESET);
    delay_ms(1);
    output_low(DISPLAY_RESET);
    delay_ms(10);
    output_high(DISPLAY_RESET); // Reset Pin High for normal operation
    */
   
   
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE

    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
    ssd1306_command(0x80);                 // the suggested ratio 0x80
   
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
    ssd1306_command(0x3F);
   
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
    ssd1306_command(0x0);                                   // no offset
   
    ssd1306_command(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
   
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
    ssd1306_command(0x14);  // using internal VCC
   
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
    ssd1306_command(0x00);          // 0x00 horizontal addressing
   
    ssd1306_command(SSD1306_SEGREMAP | 0x1); // rotate screen 180
   
    ssd1306_command(SSD1306_COMSCANDEC); // rotate screen 180
   
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    ssd1306_command(0x12);
   
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    ssd1306_command(0xCF);
   
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
    ssd1306_command(0xF1);
   
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
    ssd1306_command(0x40);
   
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 
    ssd1306_command(SSD1306_DISPLAYON);                     //switch on OLED
}
